# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FolderMaster.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import collections
import re
import platform
import shutil
from PyQt5 import QtCore, QtGui, QtWidgets

basedir = os.path.dirname(__file__)
try:
    from ctypes import windll  # Only exists on Windows.
    myappid = 'mycompany.myproduct.subproduct.version'
    windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
except ImportError:
    pass

reservedCharacters = []
subfolderDividers = []
reservedFileNames = []
if platform.system() == "Windows":
    reservedCharacters = ["<", ">", ":", "|", "?", "*"] #Note: "\" and "/" are also reserved, but are used to create subfolders.
    subfolderDividers = ["\\", "/"]
    reservedFileNames = [
        "CON", 
        "PRN", 
        "AUX", "NUL", 
        "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", 
        "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"
    ]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.originalDirectory = str(os.getcwd()[0].upper()) + str(os.getcwd()[1:])
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 520)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400, 520))
        MainWindow.setMaximumSize(QtCore.QSize(400, 520))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.join(basedir, 'images', "app_logo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.sourceButton = QtWidgets.QPushButton(self.centralwidget)
        self.sourceButton.setGeometry(QtCore.QRect(355, 15, 30, 30))
        self.sourceButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.join(basedir, 'images', "folder.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.sourceButton.setIcon(icon1)
        self.sourceButton.setObjectName("sourceButton")
        self.sourceButton.clicked.connect(MainWindow.chooseDirectory)
        self.directoryTextbox = QtWidgets.QLineEdit(self.centralwidget)
        self.directoryTextbox.setGeometry(QtCore.QRect(72, 15, 280, 30))
        self.directoryTextbox.setObjectName("directoryTextbox")
        self.directoryTextbox.setText(self.originalDirectory)
        self.folderNames = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.folderNames.setTabStopDistance(
            QtGui.QFontMetricsF(self.folderNames.font()).horizontalAdvance(' ') * 4
        )
        self.folderNames.setGeometry(QtCore.QRect(20, 109, 364, 331))
        self.folderNames.setObjectName("folderNames")
        self.createButton = QtWidgets.QPushButton(self.centralwidget)
        self.createButton.setGeometry(QtCore.QRect(274, 455, 111, 31))
        self.createButton.setObjectName("createButton")
        self.createButton.clicked.connect(MainWindow.createFolders)
        self.directoryLabel = QtWidgets.QLabel(self.centralwidget)
        self.directoryLabel.setGeometry(QtCore.QRect(20, 23, 47, 13))
        self.directoryLabel.setObjectName("directoryLabel")
        self.folderNamesLabel = QtWidgets.QLabel(self.centralwidget)
        self.folderNamesLabel.setGeometry(QtCore.QRect(20, 60, 71, 16))
        self.folderNamesLabel.setObjectName("folderNamesLabel")
        self.duplicateFoldersCheckbox = QtWidgets.QCheckBox(self.centralwidget)
        self.duplicateFoldersCheckbox.setGeometry(QtCore.QRect(20, 83, 200, 17))
        self.duplicateFoldersCheckbox.setObjectName("duplicateFoldersCheckbox")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.actionOpenNameListFile = QtWidgets.QAction(MainWindow)
        self.actionOpenNameListFile.setObjectName("actionOpenNameListFile")
        self.actionOpenNameListFile.triggered.connect(MainWindow.openNameListFile)
        self.actionSaveNameListFile = QtWidgets.QAction(MainWindow)
        self.actionSaveNameListFile.setObjectName("actionSaveNameListFile")
        self.actionSaveNameListFile.triggered.connect(MainWindow.saveNameListFile)
        self.actionChooseDirectory = QtWidgets.QAction(MainWindow)
        self.actionChooseDirectory.setObjectName("actionChooseDirectory")
        self.actionChooseDirectory.triggered.connect(MainWindow.chooseDirectory)
        self.menuFile.addAction(self.actionOpenNameListFile)
        self.menuFile.addAction(self.actionSaveNameListFile)
        self.menuFile.addAction(self.actionChooseDirectory)
        self.menubar.addAction(self.menuFile.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FolderMaster"))
        self.createButton.setText(_translate("MainWindow", "Create Folders"))
        self.directoryLabel.setText(_translate("MainWindow", "Directory:"))
        self.folderNamesLabel.setText(_translate("MainWindow", "Folder Names:"))
        self.duplicateFoldersCheckbox.setText(_translate("MainWindow", "Create cumulative duplicate folders"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpenNameListFile.setText(_translate("MainWindow", "Open name list file"))
        self.actionOpenNameListFile.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSaveNameListFile.setText(_translate("MainWindow", "Save name list file"))
        self.actionSaveNameListFile.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionChooseDirectory.setText(_translate("MainWindow", "Choose directory"))
        self.actionChooseDirectory.setShortcut(_translate("MainWindow", "Ctrl+D"))

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.originalDirectory = self.originalDirectory = str(os.getcwd()[0].upper()) + str(os.getcwd()[1:])
        self.currentDirectory = self.ui.directoryTextbox.text()
    def openWindow(self, namecases):
        caseStyleWindow = CaseStyleWindow(namecases)
        caseStyleWindow.exec_()
        return caseStyleWindow.selectedCase
    def chooseDirectory(self):
        previousDirectoryTextCopy = self.ui.directoryTextbox.text()
        folder = QtWidgets.QFileDialog.getExistingDirectory(
            self, 
            "Choose Directory to Insert Files"
        )
        if folder == "":
            folder = previousDirectoryTextCopy
        folder = folder.replace("/", "\\")
        self.ui.directoryTextbox.setText(folder)
    def folderFormattingAndReserveHandling(self, currentLine):
        #NOTE: Maybe handle cancellations, Collect/report faulty names (maybe via colour coding)
        if currentLine[0] in ["/"] or currentLine[-1] in ["/"]:
            currentLine = currentLine.strip("/")
        if currentLine[0] in ["\\"] or currentLine[-1] in ["\\"]:
            currentLine = currentLine.strip("\\")
        if any(char in currentLine for char in subfolderDividers):
            currentLine = re.split("[/\\\\]+", currentLine)
        if type(currentLine) == list:
            for folder in currentLine:
                if folder[-1] == ".":
                    folder = folder.rstrip(".")
                if folder.upper() in reservedFileNames:
                    return False
                if any(char in folder for char in reservedCharacters):
                    return False
            return currentLine
        else:
            if currentLine[-1] == ".":
                currentLine = currentLine.rstrip(".")
            if currentLine.upper() in reservedFileNames:
                return False
            if any(char in currentLine for char in reservedCharacters):
                return False
            return currentLine
    def createFolders(self):
        self.currentDirectory = self.ui.directoryTextbox.text()
        if self.currentDirectory == "":
            QtWidgets.QMessageBox.question(
                self, 
                'No Source Folder',
                "Please provide a source folder",
                QtWidgets.QMessageBox.Ok
            )
            return
        if not os.path.exists(self.currentDirectory):
            QtWidgets.QMessageBox.question(
                self, 
                'Folder does not exist',
                "Please provide an existing source folder",
                QtWidgets.QMessageBox.Ok
            )
            return
        rawNamesList = self.ui.folderNames.toPlainText()
        despacedNamesList = [
            x.strip()
            for x in rawNamesList.split("\n") 
            if x.strip()
        ]
        validNamesList = []
        validLeadingNamesList = []
        originalOrderDict = {}
        letterCasesDict = {}
        subfoldersDict = {}
        for i in range(len(despacedNamesList)):
            currentName = despacedNamesList[i]
            if any(char in currentName for char in subfolderDividers):
                currentName = re.split("[/\\\\]+", currentName)
            currentName = self.folderFormattingAndReserveHandling(currentName)
            if currentName == False:
                continue
            if type(currentName) == list:
                if currentName[0].lower() not in originalOrderDict:
                    originalOrderDict[currentName[0].lower()] = []
                if currentName[0].lower() not in subfoldersDict:
                    subfoldersDict[currentName[0].lower()] = []
                subfoldersDict[currentName[0].lower()].append(currentName)
                originalOrderDict[currentName[0].lower()].append(currentName)
            else:
                if currentName.lower() not in originalOrderDict:
                    originalOrderDict[currentName.lower()] = []
                if currentName.lower() not in letterCasesDict:
                    letterCasesDict[currentName.lower()] = []
                letterCasesDict[currentName.lower()].append(currentName)
                originalOrderDict[currentName.lower()].append(currentName)
        orderedLetterCasesDict = collections.OrderedDict(sorted(letterCasesDict.items()))
        keyUnionSet = set(orderedLetterCasesDict.keys()).union(set(subfoldersDict.keys()))
        keyUnionDict = collections.OrderedDict.fromkeys(sorted(keyUnionSet), None)
        combinedDict = {}
        combinedNameCases = {}
        combinedUniqueNameCases = {}
        chosenNamecasesList = []
        chosenNamecasesDict = {}
        for key in keyUnionDict.keys():
            combinedDict[key] = []
            combinedNameCases[key] = []
            if key in orderedLetterCasesDict.keys():
                combinedDict[key].extend(orderedLetterCasesDict[key])
                combinedNameCases[key].extend(orderedLetterCasesDict[key])
            if key in subfoldersDict.keys():
                combinedDict[key].extend(subfoldersDict[key])
                combinedNameCases[key].extend([a[0] for a in subfoldersDict[key]])
            combinedUniqueNameCases[key] = set(combinedNameCases[key])
        validNamesDict = {}
        for key in originalOrderDict.keys():
            leadingNamecaseList = combinedNameCases[key]
            namecaseSet = set(leadingNamecaseList)
            validNamesDict[key] = []
            if len(namecaseSet) > 1:
                chosenNamecase = self.openWindow(namecaseSet)
                if chosenNamecase != "":
                    for case in originalOrderDict[key]:
                        if type(case) == list:
                            case[0] = chosenNamecase
                            validNamesList.append(case)
                            validNamesDict[key].append(case)
                            validLeadingNamesList.append(case[0])
                        else:
                            validNamesList.append(chosenNamecase)
                            validNamesDict[key].append(chosenNamecase)
                            validLeadingNamesList.append(chosenNamecase)
                    chosenNamecasesList.append(chosenNamecase)
            else:
                chosenNamecase = originalOrderDict[key][0]
                for case in originalOrderDict[key]:
                    chosenNamecase = case
                    if type(case) == list:
                        validNamesList.append(chosenNamecase)
                        validNamesDict[key].append(chosenNamecase)
                        validLeadingNamesList.append(chosenNamecase[0])
                        chosenNamecase = case[0]
                    else:
                        validNamesList.append(chosenNamecase)
                        validNamesDict[key].append(chosenNamecase)
                        validLeadingNamesList.append(chosenNamecase)
                    chosenNamecasesList.append(chosenNamecase)
            if chosenNamecase != "":
                chosenNamecasesDict[chosenNamecase.lower()] = chosenNamecase
        counterList = collections.Counter(validLeadingNamesList)
        cumulativeList = []
        for item in os.listdir(self.currentDirectory):
            if item.lower() in chosenNamecasesDict.keys():
                os.rename(
                    os.path.join(self.currentDirectory, item), 
                    os.path.join(self.currentDirectory, chosenNamecasesDict[item.lower()])
                )
                continue
            parser = re.findall('[(]Copy [0-9]+[)]', item)
            if (parser != []):
                strippedItem = item.replace(parser[-1], "").strip()
                if strippedItem.lower() in chosenNamecasesDict.keys():
                    cumulativeList.append(chosenNamecasesDict[strippedItem.lower()])
                    os.rename(
                        os.path.join(self.currentDirectory, item), 
                        os.path.join(self.currentDirectory, chosenNamecasesDict[strippedItem.lower()] + " " + parser[-1])
                    )
        cumulativeCounterList = collections.Counter(cumulativeList)
        finalNamesList = []
        for item in counterList.keys():
            if(
                self.ui.duplicateFoldersCheckbox.isChecked() 
                and counterList[item] > 0
            ):
                if(item not in os.listdir(self.currentDirectory)):
                    currentValidName = validNamesList[len(finalNamesList)]
                    if type(currentValidName) == list:
                        currentValidName[0] = item
                        finalNamesList.append(currentValidName)
                    else:
                        finalNamesList.append(item)
                    for i in range(2, counterList[item] + 1): 
                        newItem = item + " " + "(Copy " + str(i + cumulativeCounterList[item] - 1) + ")"
                        currentValidName = validNamesList[len(finalNamesList)]
                        if type(currentValidName) == list:
                            currentValidName[0] = newItem
                            finalNamesList.append(currentValidName)
                        else:
                            currentValidName = validNamesList[len(finalNamesList)] = newItem
                            finalNamesList.append(currentValidName)
                else:
                    for i in range(1, counterList[item] + 1):
                        newItem = item + " " + "(Copy " + str(i + cumulativeCounterList[item]) + ")"
                        currentValidName = validNamesList[len(finalNamesList)]
                        if type(currentValidName) == list:
                            currentValidName[0] = newItem
                            finalNamesList.append(currentValidName)
                        else:
                            currentValidName = validNamesList[len(finalNamesList)] = newItem
                            finalNamesList.append(currentValidName)
            else:
                finalNamesList.append(item)
        namesList = finalNamesList if not self.ui.duplicateFoldersCheckbox.isChecked() else validNamesList
        if not self.ui.duplicateFoldersCheckbox.isChecked(): 
            for name in namesList:
                nameFromDict = validNamesDict[name.lower()][0]
                if type(nameFromDict) == list:
                    if name in os.listdir(self.currentDirectory):
                        folderDirectory = os.path.join(self.currentDirectory, nameFromDict[0])
                        shutil.rmtree(folderDirectory)
                    os.makedirs(self.currentDirectory + "\\" + "\\".join(nameFromDict))
                else:
                    if name in os.listdir(self.currentDirectory):
                        folderDirectory = os.path.join(self.currentDirectory, name)
                        if len(os.listdir(folderDirectory)) > 0:
                            shutil.rmtree(folderDirectory)
                        else:
                            continue
                    os.mkdir(self.currentDirectory + "\\" + validNamesDict[name.lower()][0])
        else:
            for name in namesList:
                if type(name) == list:
                    os.makedirs(self.currentDirectory + "\\" + "\\".join(name))
                else: 
                    os.mkdir(self.currentDirectory + "\\" + name)
    def openNameListFile(self):
        fileToOpen = QtWidgets.QFileDialog.getOpenFileName(
            self, 
            "Open Name List Text File",
            self.ui.directoryTextbox.text(),
            "Text Files (*.txt)"
        )
        if (fileToOpen[0] != ""):
            with open(fileToOpen[0], "r") as fileContents:
                for name in fileContents:
                    self.ui.folderNames.appendPlainText(name.strip("\n"))
            fileContents.close()
    def saveNameListFile(self):
        fileToSave = QtWidgets.QFileDialog.getSaveFileName(
            self, 
            "Save Name List Text File",
            self.ui.directoryTextbox.text(),
            "Text Files (*.txt)"
        )
        if (fileToSave[0] != ""):
            with open(fileToSave[0], "w") as fileContents:
                folderNames = self.ui.folderNames.toPlainText()
                fileContents.write(folderNames)
            fileContents.close()

class Ui_CaseStyleWindow(object):
    def setupUi(self, CaseStyleWindow):
        CaseStyleWindow.setObjectName("CaseStyleWindow")
        CaseStyleWindow.resize(300, 420)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(CaseStyleWindow.sizePolicy().hasHeightForWidth())
        CaseStyleWindow.setSizePolicy(sizePolicy)
        CaseStyleWindow.setMinimumSize(QtCore.QSize(300, 420))
        CaseStyleWindow.setMaximumSize(QtCore.QSize(300, 420))
        self.centralwidget = QtWidgets.QWidget(CaseStyleWindow)
        self.centralwidget.setGeometry(QtCore.QRect(0, 0, 300, 418))
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(20, 40, 260, 300))
        self.listWidget.setObjectName("listWidget")
        self.chooseCasesLabel = QtWidgets.QLabel(self.centralwidget)
        self.chooseCasesLabel.setGeometry(QtCore.QRect(20, 15, 241, 16))
        self.chooseCasesLabel.setObjectName("chooseCasesLabel")
        self.cancelLabel = QtWidgets.QLabel(self.centralwidget)
        self.cancelLabel.setGeometry(QtCore.QRect(20, 350, 241, 21))
        self.cancelLabel.setObjectName("cancelLabel")
        self.buttonBox = QtWidgets.QDialogButtonBox(self.centralwidget)
        self.buttonBox.setGeometry(QtCore.QRect(130, 380, 150, 25))
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.retranslateUi(CaseStyleWindow)
        QtCore.QMetaObject.connectSlotsByName(CaseStyleWindow)
    def retranslateUi(self, CaseStyleWindow):
        _translate = QtCore.QCoreApplication.translate
        CaseStyleWindow.setWindowTitle(_translate("CaseStyleWindow", "Choose a case style"))
        self.chooseCasesLabel.setText(_translate("CaseStyleWindow", "Choose the case style to use:"))
        self.cancelLabel.setText(_translate("CaseStyleWindow", "Click \'Cancel\' in order to use none of them."))

class CaseStyleWindow(QtWidgets.QDialog):
    def __init__(self, namecases):
        super(CaseStyleWindow, self).__init__()
        self.setWindowFlags(QtCore.Qt.WindowTitleHint | QtCore.Qt.WindowCloseButtonHint) #This disables the '?' hint button
        self.ui = Ui_CaseStyleWindow()
        self.ui.setupUi(self)
        self.namecases = namecases
        self.selectedCase = ""
        self.isAccepted = False
        self.ui.listWidget.addItems(sorted(self.namecases, key=str.swapcase))
        self.ui.listWidget.itemSelectionChanged.connect(self.selectionChanged)
        self.ui.buttonBox.accepted.connect(self.closeWithCaseStyle)
        self.ui.buttonBox.rejected.connect(self.closeWithoutCaseStyle)
    def selectionChanged(self):
        self.selectedCase = self.ui.listWidget.currentItem().text()
    def closeWithCaseStyle(self):
        if self.selectedCase != "":
            self.selectedCase = self.ui.listWidget.currentItem().text()
            self.isAccepted = True
            QtWidgets.QDialog.close(self)
        else:
            QtWidgets.QMessageBox.question(
                self, 
                'No Case Style Selected',
                "Please select a case style. If you don't want any case, click 'Cancel'",
                QtWidgets.QMessageBox.Ok
            )
    def closeWithoutCaseStyle(self):
        self.selectedCase = ""
        QtWidgets.QDialog.close(self)
    def closeEvent(self, event): #overridden method
        if self.isAccepted == True:
            event.accept()
        else:
            self.selectedCase = ""
            event.accept()
    
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon(os.path.join(basedir, 'images', 'app_logo.ico')))
    myapp = MainWindow()
    myapp.show()
    sys.exit(app.exec_())